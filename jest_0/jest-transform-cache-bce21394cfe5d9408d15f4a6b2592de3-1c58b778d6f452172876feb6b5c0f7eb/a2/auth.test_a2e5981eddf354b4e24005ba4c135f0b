'use strict';var _auth = require('./auth');













var _config = require('../config');var _config2 = _interopRequireDefault(_config);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}

describe('setAuthToken', () => {
    it('should return an action', () => {
        const authToken = 'token';
        const action = (0, _auth.setAuthToken)(authToken);
        expect(action.type).toEqual(_auth.SET_AUTH_TOKEN);
        expect(action.authToken).toEqual(authToken);
    });
});

describe('authSuccess', () => {
    it('should return an action', () => {
        const currentUser = 'user';
        const action = (0, _auth.authSuccess)(currentUser);
        expect(action.type).toEqual(_auth.AUTH_SUCCESS);
        expect(action.currentUser).toEqual(currentUser);
    });
});

describe('authError', () => {
    it('should return an action', () => {
        const error = 'error';
        const action = (0, _auth.authError)(error);
        expect(action.type).toEqual(_auth.AUTH_ERROR);
        expect(action.error).toEqual(error);
    });
});

describe('clearAuth', () => {
    it('should return an action', () => {
        const action = (0, _auth.clearAuth)();
        expect(action.type).toEqual(_auth.CLEAR_AUTH);
    });
});

describe('signedUp', () => {
    it('should return an action', () => {
        const action = (0, _auth.signedUp)();
        expect(action.type).toEqual(_auth.SIGNED_UP);
    });
});

describe('login', () => {
    it('should dispatch storeAuthInfo', () => {
        const authToken = {
            authToken: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7InVzZXJuYW1lIjoiaXNhZWxsaXphbWEiLCJwYXNzd29yZCI6IiQyYSQxMCRhVGhlUkExdFBYaUpCQmw4aWVjZExPSWMzeFJUTXkzL0RaR3AwRDcyZGZDTlN1QlFSZ25ZYSIsImNyZWF0ZWRBdCI6IjIwMTgtMDYtMDRUMTQ6MDI6MjEuMDU0WiIsInVwZGF0ZWRBdCI6IjIwMTgtMDYtMDRUMTQ6MDI6MjEuMDU0WiIsImlkIjoiNWIxNTQ2NmQ0YTdmOGEyNDExYTE3OGRiIn0sImlhdCI6MTUyODM0MTk0NywiZXhwIjoxNTI4OTQ2NzQ3LCJzdWIiOiJpc2FlbGxpemFtYSJ9.CpI224ccVLn-1fcW_q5nSKimswpwvdDIf_l225tueig' };

        const username = 'user';
        const password = 'password';

        global.fetch = jest.fn().mockImplementation(() =>
        Promise.resolve({
            ok: true,
            json() {
                return authToken;
            } }));



        const dispatch = jest.fn();
        return (0, _auth.login)()(dispatch).then(() => {
            expect(fetch).toHaveBeenCalledWith(`${_config2.default}/login`);
        });
    });
});
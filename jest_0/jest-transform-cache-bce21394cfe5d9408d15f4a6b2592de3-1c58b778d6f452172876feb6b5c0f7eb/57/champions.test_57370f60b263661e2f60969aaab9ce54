'use strict';var _champions = require('./champions');
















describe('searchChampion', () => {
    it('should return an action', () => {
        const champion = 'olaf';
        const action = (0, _champions.searchChampion)(champion);
        expect(action.type).toEqual(_champions.SEARCH_CHAMPION);
        expect(action.value).toEqual(champion);
    });
});

describe('championFetchRequest', () => {
    it('should return an action', () => {
        const action = (0, _champions.championFetchRequest)();
        expect(action.type).toEqual(_champions.CHAMPION_FETCH_REQUEST);
    });
});

describe('championFetchSuccess', () => {
    it('should return an action', () => {
        const champions = ['olaf', 'aatrox'];
        const action = (0, _champions.championFetchSuccess)(champions);
        expect(action.type).toEqual(_champions.CHAMPION_FETCH_SUCCESS);
        expect(action.champions).toEqual(champions);
    });
});

describe('championFetchError', () => {
    it('should return an action', () => {
        const error = 'error';
        const action = (0, _champions.championFetchError)(error);
        expect(action.type).toEqual(_champions.CHAMPION_FETCH_ERROR);
        expect(action.error).toEqual(error);
    });
});

describe('championIsClicked', () => {
    it('should return an action', () => {
        const id = '321312';
        const action = (0, _champions.championIsClicked)(id);
        expect(action.type).toEqual(_champions.CHAMPION_IS_CLICKED);
        expect(action.id).toEqual(id);
    });
});

describe('clearChampionClickedSearched', () => {
    it('should return an action', () => {
        const action = (0, _champions.clearChampionClickedSearched)();
        expect(action.type).toEqual(_champions.CLEAR_CHAMPION_CLICKED_SEARCHED);
    });
});
'use strict';var _auth = require('../actions/auth');







var _loginReducer = require('./loginReducer');var _loginReducer2 = _interopRequireDefault(_loginReducer);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}

describe('loginReducer', () => {
    it('should return the initial state when nothing is passed', () => {
        const state = (0, _loginReducer2.default)(undefined, { type: '__UNKNOWN' });
        expect(state).toEqual({
            authToken: null,
            currentUser: null,
            error: null,
            signedUp: null });

    });

    describe('setAuthToken', () => {
        it('should set the auth token to the state', () => {
            const authToken = 'dsadsadas';

            let state = {
                authToken: null };


            state = (0, _loginReducer2.default)(state, (0, _auth.setAuthToken)(authToken));

            expect(state).toEqual({
                authToken });

        });
    });

    describe('clearAuth', () => {
        it('should clear the auth token from the state', () => {
            let state = {
                authToken: 'dsadsadsadsa',
                currentUser: 'user' };


            state = (0, _loginReducer2.default)(state, (0, _auth.clearAuth)());
            expect(state).toEqual({
                authToken: null,
                currentUser: null });

        });
    });

    describe('authSuccess', () => {
        it('should add the user to the state', () => {
            let currentUser = 'user';

            let state = {
                currentUser: null,
                signedUp: false,
                error: null };


            state = (0, _loginReducer2.default)(state, (0, _auth.authSuccess)(currentUser));
            expect(state).toEqual({
                currentUser,
                signedUp: false,
                error: null });

        });
    });

    describe('authError', () => {
        it('should put the error in the state', () => {
            let error = 'error';

            let state = {
                error: null };


            state = (0, _loginReducer2.default)(state, (0, _auth.authError)(error));
            expect(state).toEqual({
                error });

        });
    });

    describe('signedUp', () => {
        it('should switch the signedUp value to true', () => {
            let state = {
                signedUp: false };


            state = (0, _loginReducer2.default)(state, (0, _auth.signedUp)());
            console.log(state);
            expect(state).toEqual({
                signedUp: true });

        });
    });
});